# Stats - Computes the mean, median of multiple rows or columns of data
# By Megan Aldridge
# CS344 OSU Online
# January 30, 2016


#### Trap Signals
trap "rm -f *$$; exit" SIGHUP SIGINT SIGTERM


#### Variables
dataType=""
dataFilePath="datafile$$"
averageFile="avg$$"
medianFile="med$$"
tempFilePath="tempfile$$"

#### Functions

# Assign datafilepath from stdin or file
function setFilePath {

	# Error: no data file	
	if [ "$#" = "0" ]
	then
		echo "./stats {-rows|-cols} [file]" 1>&2
		exit 1

	# Data file from standard input
	elif [ "$#" = "1" ]
	then
		cat > "$dataFilePath";

	# Date file from file
	elif [ "$#" = "2" ]
	then
		dataFilePath=$2

	# Error: too many arguments
	else
		echo "./stats {-rows|-cols} [file]" 1>&2
		exit 1;
	fi
}

function rowStats {
# Pass each line to average 
# Compute average
# Redirect average to tempFile

	while read line
	do
		average  "$line" >> $averageFile
	done < "$dataFilePath"


# Pass each line to median
# Compute median
# Redirect median to tempFile

	while read line
	do
		median "$line" >> $medianFile
	done < "$dataFilePath"
	
}

function colStats {
# Figure out word count per line to determine number of columns 
	local words="$(wc -w < $dataFilePath)"
	local lines="$(wc -l < $dataFilePath)"
	local columns=$(expr $words /  $lines )
	local count=1	

# Pass each line to average 
# Compute average
# Redirect average to tempFile

	while [ $count -le $columns ];
	do
		average "$(cut -f$count < $dataFilePath)"  >> $averageFile  
		let count=count+1
	done

# Pass each line to median
# Compute median
# Redirect median to tempFile
	count=1

	while [ $count -le $columns ];
	do
		median "$(cut -f$count < $dataFilePath)" >> $medianFile  
		let count=count+1
	done


}

# Format output for row or column data
function output {
	
	# Format row output
	if [[ $dataType == "row" ]];
	then
		printf "Average\tMedian\n"
		
		while read f1 <&7
		do
   			 read f2 <&8
			 printf "%s\t%s\n" "$f1" "$f2"
		done \
 		   7<$averageFile \
 		   8<$medianFile

	# Format column output 	
	elif [[ $dataType == "column" ]];
	then
		echo "Averages:"
		cat $averageFile | tr "\n" "\t"
		echo
		echo "Medians:"
		cat $medianFile | tr "\n" "\t"
		echo	

	else
		exit 1;	
	fi
}

# Calculate average of row or column data
function average {
	local sum=0;
	local count=0;
	local average=0;
	
	for num in $1
	do
		sum=$((sum+$num))
		count=$((count+1))
	done
	
	average=$(expr \( $sum + \( $count / 2 \) \) / $count)
	printf "%s\n" "$average"
}


# Calculate median of row or column data
function median {
	
	local count=0;
	local med=0;
	
	echo "$1" | tr "\t" "\n" | sort -g > $tempFilePath 	
	
	count="$(wc -l < $tempFilePath)"

	# Check if count is even or odd
	if [ $(( $count % 2 )) -eq 0 ]
	then
		med=$(expr \( $count / 2 \) + 1)	
	elif [ $(( $count % 2 )) -eq 1 ]
	then
		med=$(expr \( $count / 2 \) + 1)
	fi
	
	cat $tempFilePath | head --lines=$med | tail --lines=1 	
}

# Determine if user wants column or row statistics
function setDataType {
	if [[ $1 == -r* ]];
	then
		dataType="row"
	elif [[ $1 == -c* ]];
	then
		dataType="column"
	else
		echo "./stats {-rows|-cols} [file]" 1>&2
		exit 1;	
	fi
}


# Check file permissions
function checkIfFileReadable {
	if [[ ! -r $dataFilePath ]]
	then
		echo "./stats: cannot read $dataFilePath" 1>&2
		exit 1;
	fi
}

# Determine if the data file exists
function checkIfFileExists {
	if [[ ! -f $dataFilePath ]]
	then
		echo "./stats: cannot read $dataFilePath" 1>&2
		exit 1;
	fi

}

# Determine if the data file is empty 
function checkIfFileEmpty {
	if [[ ! -s $dataFilePath ]]
	then
		echo "Warning: Data file is empty" 1>&2
		exit 0;
	fi
}

# Cleanup temporary files
function cleanup {
	rm -f avg* med* temp* datafile*; exit 0;
}


#### Main

#### Trap Signals
trap "rm -f *$$; exit 1" SIGHUP SIGINT SIGTERM

setFilePath $1 $2 $3
checkIfFileExists
checkIfFileReadable
checkIfFileEmpty 
setDataType $1

if [ $dataType == "row" ]
then
	rowStats
elif [ $dataType == "column" ]
then
	colStats
else
	exit 1;
fi 

output
cleanup
