
#!/bin/bash -x 

# Stats - Computes the mean, median of multiple rows or columns of data
# By Megan Aldridge
# CS344 OSU Online
# January 30, 2016


#### Trap Signals
trap "rm -f avg* med* tempfile*; exit" SIGHUP SIGINT SIGTERM


#### Variables
dataType=""
dataFilePath="datafile$$"
averageFile="avg$$"
medianFile="med$$"
tempFilePath="tempfile$$"

#### Functions

# Assign datafilepath from stdin or file
function setFilePath {
	if [ "$#" = "0" ]
	then
		echo "./stats {-row|-cols} [file]" 1>&2
		exit 1
	elif [ "$#" = "1" ]
	then
#		echo "data is from stdin";
		cat > "$dataFilePath";
	elif [ "$#" = "2" ]
	then
#		echo "data is from file";
		dataFilePath=$2
	else
		echo "./stats {-rows|-cols} [file]" 1>&2
		exit 1;
	fi
}

function rowStats {
# Pass each line to average 
# Compute average
# Redirect average to tempFile

	while read line
	do
		average  "$line" >> $averageFile
	done < "$dataFilePath"


# Pass each line to median
# Compute median
# Redirect median to tempFile

	while read line
	do
		#echo $line
		median "$line" >> $medianFile
	done < "$dataFilePath"
	
}

function colStats {
# Figure out word count to determine number of columns 
	local words="$(wc -w < $dataFilePath)"
	local lines="$(wc -l < $dataFilePath)"
	local columns=$(expr $words /  $lines )
	local count=1	

# Pass each line to average 
# Compute average
# Redirect average to tempFile

	while [ $count -le $columns ];
	do
		average "$(cut -f$count < $dataFilePath)"  >> $averageFile  
		let count=count+1
	done

# Pass each line to median
# Compute median
# Redirect median to tempFile
	count=1

	while [ $count -le $columns ];
	do
		median "$(cut -f$count < $dataFilePath)" >> $medianFile  
		let count=count+1
	done


}


function output {
# Format output 
	if [[ $dataType == "row" ]];
	then
	#	echo "displaying row stats";
	#	echo
		echo "Average Median"
	
		
		while read f1 <&7
		do
   			 read f2 <&8
			 printf "%s\t%s\n" "$f1" "$f2"
		done \
 		   7<$averageFile \
 		   8<$medianFile

	elif [[ $dataType == "column" ]];
	then
	#	echo "displaying column stats";
	#	echo
		echo "Averages:"
		cat $averageFile | tr "\n" "\t"
		echo
		echo "Medians:"
		cat $medianFile | tr "\n" "\t"
		echo	

	else
		exit 1;	
	fi
}

# Calculate mean of row or column data
function average {
	local sum=0;
	local count=0;
	local average=0;
	#echo "Calculating mean of data";
	for num in $1
	do
		#echo $num
		sum=$((sum+$num))
		count=$((count+1))
		#printf "sum= %s\ncount= %s\n" "$sum" "$count" 
	done
	#average=$(expr $sum / $count)
	average=$(expr \( $sum + \( $count / 2 \) \) / $count)
	printf "%s\n" "$average"
}

function median {
	
	local count=0;
	local med=0;
	
	#echo "test: $1"

	echo "$1" | tr "\t" "\n" | sort -g > $tempFilePath 	
	
	count="$(wc -l < $tempFilePath)"

	# Check if n is even or odd
	if [ $(( $count % 2 )) -eq 0 ]
	then
	#	echo "even"
		med=$(expr \( $count / 2 \) + 1)	
	elif [ $(( $count % 2 )) -eq 1 ]
	then
	#	echo "odd"
		med=$(expr \( $count / 2 \) + 1)
	#	echo $med				
	fi
	#echo "result"
	
	cat $tempFilePath | head --lines=$med | tail --lines=1 #>> medianFile	
}
# Determine if user wants column or row statistics
function setDataType {
	if [[ $1 == -r* ]];
	then
		dataType="row"
	#	echo "calculating row stats";
	elif [[ $1 == -c* ]];
	then
		dataType="column"
	#	echo "calculating column stats";
	else
		echo "./stats {-rows|-cols} [file]" 1>&2
		exit 1;	
	fi
}


# Check file permissions
function checkIfFileReadable {
	if [[ ! -r $dataFilePath ]]
	then
		echo "./stats: cannot read $dataFilePath" 1>&2
		exit 1;
	fi
}
# Determine if the data file exists
function checkIfFileExists {
	if [[ ! -f $dataFilePath ]]
	then
		echo "./stats: cannot read $dataFilePath" 1>&2
		exit 1;
	fi

}

# Determine if the data file is empty 
function checkIfFileEmpty {
	if [[ ! -s $dataFilePath ]]
	then
		echo "Warning: Data file is empty" 1>&2
		exit 0;
	fi
}


#### Main
#printf "rows= %s\ncolumns= %s\n" "$rows" "$columns" 
setFilePath $1 $2 $3
checkIfFileExists
checkIfFileReadable
checkIfFileEmpty 
setDataType $1

if [ $dataType == "row" ]
then
#	echo "Calling row stats"
	rowStats
elif [ $dataType == "column" ]
then
#	echo "Calling col stats"
	colStats
else
	exit 1;
fi 

output

rm -f avg* med* temp* datafile*


